openapi: 3.0.3
info:
  title: Trail Day REST API - Issue Tracker API
  version: 1.0.0
  description: |
    This API allows clients to perform discovery, health checks, and issue tracking.
    This API requires:
    - Setting the `X-Client-ID` header for all requests. Set this value: `my-client-id-123` to X-Client-ID field in Authorize area.
    - Authorizing using Bearer Token after login. Set token via Authorization tab or `Authorization` header.
    
    ## Versioning and Prefix
    - You can switch between versions using the path parameters like `/v1`, `/v2`, or omit when not needed.
    - Prefix can also be changed dynamically depending on environment setup.

    * All endpoints require `X-Client-ID` (Value: `my-client-id-123`).  
    * Some endpoints require Bearer Token from login response.


servers:
  - url: "{protocol}://{host}:{port}{api_prefix}{api_version}"
    description: Configurable Server
    variables:
      protocol:
        default: http
        enum:
          - "http"
          - "https"
      host:
        default: localhost
        enum:
          - localhost
          - api.testilo.com
      port:
        default: "8080"
        enum:
          - "8080"
          - "443"
          - "80"
      api_prefix:
        default: /api
        enum:
          - /api
          - /core
          - ''
      api_version:
        default: /v1
        enum:
          - /v1
          - /v2
          - ''
  
  - url: "{protocol}://{hostname}:{port}"
    description: Legacy/Non-prefixed APIs
    variables:
      protocol:
        default: https
      hostname:
        default: api.Trialday.com
      port:
        default: '8080'

security:
  - BearerAuth: []
  - ClientIdAuth: []

tags:
  - name: System
    description: System related operations
  - name: Auth
    description: Authentication related operations
  - name: Issues
    description: CRUD and filter operations for issue tracking

paths:  
  /:
    get:
      summary: "Service Discovery Endpoint"
      tags: [System]
      operationId: getDiscovery
      responses:
        '400':
          $ref: '#/components/responses/MissingClientIdHeader'
        '403':
          $ref: '#/components/responses/InvalidClientId'
        '200':
          description: Service discovery details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryResponse'
            

  /health:
    get:
      summary: "Health Check of API Server"
      tags: [System]
      operationId: getHealthCheck
      responses:
        '400':
          $ref: '#/components/responses/MissingClientIdHeader'
        '403':
          $ref: '#/components/responses/InvalidClientId'
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            example: UP
        '503':
          description: Service unavailable
  /auth/login:
    post:
      tags: [Auth]
      summary: "User login and token generation (Task 5)"
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '400':
          $ref: '#/components/responses/MissingClientIdHeader'
        '403':
          $ref: '#/components/responses/InvalidClientId'
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /issues:
    get:
      summary: "Retrieve all issues (Task 2)"
      tags: [Issues]
      operationId: getAllIssues
      responses:
        '400':
          $ref: '#/components/responses/MissingClientIdHeader'
        '403':
          $ref: '#/components/responses/InvalidClientId'
        '200':
          description: List of issues
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Issue'

  /issues/{id}:
    get:
      tags: [Issues]
      summary: "Get issue by ID (Task 2)"
      operationId: getIssueById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '400':
          $ref: '#/components/responses/MissingClientIdHeader'
        '403':
          $ref: '#/components/responses/InvalidClientId'
        '200':
          description: Issue found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Issue'
        '404':
          description: Issue not found

    put:
      tags: [Issues]
      summary: "Update an issue (Task 3)"
      operationId: replaceIssue
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '400':
          $ref: '#/components/responses/MissingClientIdHeader'
        '403':
          $ref: '#/components/responses/InvalidClientId'
        '200':
          description: Issue replaced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '404':
          description: Issue not found

    # patch:
    #   tags: [Issues]
    #   summary: "[T4] Partially update issue"
    #   operationId: patchIssue
    #   parameters:
    #     - in: path
    #       name: id
    #       required: true
    #       schema:
    #         type: string
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #           additionalProperties: true
    #   responses:
    #     '400':
    #       $ref: '#/components/responses/MissingClientIdHeader'
    #     '403':
    #       $ref: '#/components/responses/InvalidClientId'
    #     '200':
    #       description: Issue updated
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/BaseResponse'
    #     '404':
    #       description: Issue not found

    # delete:
    #   tags: [Issues]
    #   summary: "[T6] Delete issue"
    #   operationId: deleteIssue
    #   parameters:
    #     - in: path
    #       name: id
    #       required: true
    #       schema:
    #         type: string
    #   responses:
    #     '400':
    #       $ref: '#/components/responses/MissingClientIdHeader'
    #     '403':
    #       $ref: '#/components/responses/InvalidClientId'
    #     '204':
    #       description: Issue deleted
    #     '404':
    #       description: Issue not found

  # /issues/filter:
  #   post:
  #     tags: [Issues]
  #     summary: "[T7] Filter issues by status and priority"
  #     operationId: filterIssues
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/IssueFilter'
  #     responses:
  #       '400':
  #         $ref: '#/components/responses/MissingClientIdHeader'
  #       '403':
  #         $ref: '#/components/responses/InvalidClientId'
  #       '200':
  #         description: Matching issues
  #         content:
  #           application/json:
  #             schema:
  #               allOf:
  #                 - $ref: '#/components/schemas/BaseResponse'
  #                 - type: object
  #                   properties:
  #                     data:
  #                       type: array
  #                       items:
  #                         $ref: '#/components/schemas/Issue'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ClientIdAuth:
      type: apiKey
      in: header
      name: X-Client-ID

  responses:
    MissingClientIdHeader:
      description: Missing `X-Client-ID` header
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MissingClientIdError'

    InvalidClientId:
      description: Invalid `X-Client-ID` header value
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidClientIdError'

  schemas:
    ErrorDetail:
      type: object
      properties:
        field:
          type: string
          example: x-client-id
        message:
          type: string
          example: X-Client-ID header is required
        code:
          type: string
          example: missing_client_id

    MissingClientIdError:
      type: object
      properties:
        type:
          type: string
          example: about:blank
        title:
          type: string
          example: Missing X-Client-ID header
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: Missing X-Client-ID header
        instance:
          type: string
          example: /api/v1/issues/1
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
        success:
          type: boolean
          example: false

    InvalidClientIdError:
      type: object
      properties:
        type:
          type: string
          example: about:blank
        title:
          type: string
          example: Invalid X-Client-ID
        status:
          type: integer
          example: 403
        detail:
          type: string
          example: Invalid X-Client-ID
        instance:
          type: string
          example: /api/v1/issues/1
        errors:
          type: array
          nullable: true
          items:
            type: object
        success:
          type: boolean
          example: false

    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        errors:
          type: array
          items:
            type: string
          example: []

    DiscoveryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                discovery:
                  type: string
                  example: http://localhost:8080

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: admin@example.com
        password:
          type: string
          format: password
          example: Password123

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI...

    Issue:
      type: object
      properties:
        id:
          type: string
          example: abc123
        title:
          type: string
          example: Bug in login
        description:
          type: string
          example: When logging in, the page crashes.
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
          example: open
        priority:
          type: string
          enum: [low, medium, high]
          example: high
        createdAt:
          type: string
          format: date-time
          example: 2025-05-25T08:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-05-25T09:00:00Z

    IssueFilter:
      type: object
      properties:
        status:
          type: string
          example: open
        priority:
          type: string
          example: high
