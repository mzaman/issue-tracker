openapi: 3.0.3
info:
  title: Trial Day REST API - Issue Tracker API
  version: 1.0.0
  description: |
    This API allows clients to perform discovery, health checks, and issue tracking.
    This API requires:
    - Setting the `X-Client-ID` header for all requests. Set this value: `my-client-id-123` to X-Client-ID field in Authorize area.
    - Authorizing using Bearer Token after login. Set token via Authorization tab or `Authorization` header.
    
    ## Versioning and Prefix
    - You can switch between versions using the path parameters like `/v1`, `/v2`, or omit when not needed.
    - Prefix can also be changed dynamically depending on environment setup.
    - For example, `/api/v1` or `/api/v2` or `/v1` or `/v2` depending on the setup. And all APIs are accessible in all combinations of: 
      - `No prefix (/)` `Version only (/v1, /v2, etc.)` `API prefix only (/api)` `API prefix + version (/api/v1, /api/v2, etc.)`

    - When version grows (v1, v2, and so on), as a future-proof solution, this setup allows:
      -	`/health` `/api/health` `/v1/health` `/v2/health` `/api/v1/health` `/api/v2/health` etc...
      
    * All endpoints require `X-Client-ID` (Value: `my-client-id-123`).  
    * Some endpoints require Bearer Token from login response.


servers:
  - url: "{protocol}://{host}:{port}{api_prefix}{api_version}"
    description: Configurable Server
    variables:
      protocol:
        default: http
        enum:
          - "http"
          - "https"
      host:
        default: localhost
        enum:
          - localhost
          - api.testilo.com
      port:
        default: "8080"
        enum:
          - "8080"
          - "443"
          - "80"
      api_prefix:
        default: /api
        enum:
          - /api
          - /core
          - ''
      api_version:
        default: /v1
        enum:
          - /v1
          - /v2
          - ''
  
  - url: "{protocol}://{hostname}:{port}"
    description: Legacy/Non-prefixed APIs
    variables:
      protocol:
        default: https
      hostname:
        default: localhost
      port:
        default: '8080'


tags:
  - name: System
    description: System related operations
  - name: Auth
    description: Authentication related operations
  - name: Issues
    description: CRUD and filter operations for issue tracking
  - name: Task 1
    description: Implement an endpoint that creates a new issue
  - name: Task 2
    description: Implement an endpoint that lists all stored issues
  - name: Task 3
    description: Implement an endpoint that modifies an issue
  - name: Task 4
    description: |
      Implement issue revisions. Each change is a **revision**, containing the issue current state and the changes made.

      _For example:_

      ```json
      {
          "issue": {
              "title": "Bug in issue-service",
              "description": "It does not generate revisions"
          },
          "changes": {
              "description": "It does not generate revisions"
          },
          "updatedAt": "2024-03-29T15:40:42.000Z"
      }
      ```

      Requirements:

      * Store issue revision when creating a new issue
      * Store issue revision when updating an issue
      * Implement a new endpoint that returns all revisions of a particular issue  
      
  - name: Task 5
    description: |
      * Require a valid JWT token to be present for all requests (except for the discovery and health endpoints)
      * Clients must include an X-Client-ID header in every request. 
      * Every time a change is made to the DB, store the change author's email address (i.e. `created_by`, `updated_by`).

  - name: Task 6
    description: |
      Before and after comparison
      Create an endpoint that takes two revisions of a particular issue and returns the difference between the two.

      The response object should contain the following data pieces:
      * `before`: the issue's content at revision A
      * `after`: the issue's content at revision B
      * `changes`: summary of the differences (i.e. listing all properties that have changed and their values)
      * `revisions`: the full trail of revisions between version A and B

      By default the comparison can work from older to newer revisions, but for bonus points you can implement comparisons from newer to older revisions as well. 
  
  - name: Bonus points
    description: |
      * Code covered by tests
      * Generate documentation for the API
      * Define migrations for the data schema changes

paths:  
  /:
    get:
      summary: Service Discovery Endpoint
      description: >
        Returns metadata and configuration details for available services, 
        based on the provided Client ID header.
      tags:
        - System
      operationId: getServiceDiscovery
      responses:
        '200':
          description: Service discovery details returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryResponse'
        '400':
          $ref: '#/components/responses/MissingClientIdHeader'
        '403':
          $ref: '#/components/responses/InvalidClientId'
            
  /health:
    get:
      summary: Health Check of API Server
      description: Returns current operational health of the API server.
      tags:
        - System
      operationId: getHealthCheck
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: OK
                          version:
                            type: string
                            example: "1.0.0"
              example:
                success: true
                message: "Request succeeded"
                data:
                  message: "OK"
                  version: "1.0.0"
                errors: null

        '400':
          $ref: '#/components/responses/MissingClientIdHeader'

        '403':
          $ref: '#/components/responses/InvalidClientId'

        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Service Unavailable"
                errors:
                  - message: "The server is temporarily unable to handle the request"
                status: 503

  # /health:
  #   get:
  #     summary: Health Check of API Server
  #     description: >
  #       Returns the health status of the API server. Requires a valid client ID for access control.
  #     tags:
  #       - System
  #     operationId: getHealthCheck
  #     parameters:
  #       - in: header
  #         name: X-Client-Id
  #         required: true
  #         schema:
  #           type: string
  #         description: Unique client identifier for validating the request.
  #     responses:
  #       '200':
  #         description: Server is healthy and responsive.
  #         content:
  #           application/json:
  #             schema:
  #               allOf:
  #                 - $ref: '#/components/schemas/BaseResponse'
  #                 - type: object
  #                   properties:
  #                     data:
  #                       type: object
  #                       properties:
  #                         status:
  #                           type: string
  #                           example: UP
  #                           description: Indicates the operational status of the API server.
  #       '400':
  #         $ref: '#/components/responses/MissingClientIdHeader'
  #       '403':
  #         $ref: '#/components/responses/InvalidClientId'
  #       '503':
  #         description: Service unavailable. The server is not healthy or undergoing maintenance.
  
  /auth/login:
    post:
      tags: 
        - Auth
        - Task 5
      summary: "User login and token generation"
      description: |
        After successful login, copy the `accessToken` from the response and paste it into the **Authorize Bearer Token** field (top-right corner) to access protected APIs.
        **Email pattern:** `user-<number>@example.com`  
        _(e.g., user-1@example.com, user-2@example.com, ..., user-99@example.com)_  
        **Common test password:** `Password123`
        **Total test users:** 99
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/MissingClientIdHeader'
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '403':
          $ref: '#/components/responses/InvalidClientId'

  /issues:
    post:
      tags:
        - Issues
        - Task 1
      summary: "Create a new issue"
      description: Creates a new issue with a title, description, and optional assignee.
      operationId: createIssue
      security:
        - BearerAuth: []
        - ClientIdAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIssueRequest'
            example:
              title: "Bug in issue-service"
              description: "Ah snap :("
              status: "open"
              priority: "medium"
              assignee: null
      responses:
        '201':
          description: Issue successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - Issues
        - Task 2
      summary: Get all issues with filters and pagination
      description: |
        Retrieve a paginated list of issues filtered by status, priority, and searchable by title/description. Results are sortable and support client authentication.
      operationId: getAllIssues
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination

        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 5
          description: Number of items per page

        - name: status
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [open, in_progress, resolved, closed]
            default: [open, in_progress, resolved]
          description: Filter by one or more issue statuses

        - name: priority
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [low, medium, high, critical]
            default: [medium, high, critical]
          description: Filter by one or more issue priorities

        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [id, priority, created_at, updated_at, status]
            default: id
          description: Field to sort the issues by

        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order for results

        - name: search
          in: query
          required: false
          schema:
            type: string
            default: ""
          description: Text search within title and description
      security:
        - BearerAuth: []
        - ClientIdAuth: []
      responses:
        '200':
          description: List of issues with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIssuesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /issues/{id}:
    get:
      tags: 
        - Issues
        - Task 2
      summary: "Get issue by ID"
      operationId: getIssueById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Issue found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Issue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - Issues
        - Task 3
      summary: Update an existing issue
      description: Update the title, description, status, priority, or assignee of a specific issue.
      operationId: updateIssue
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Unique identifier for the issue to update.
      security:
        - BearerAuth: []
        - ClientIdAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIssueRequest'
            example:
              title: "Bug in issue-service"
              description: "It does not generate revisions"
              status: "in_progress"
              priority: "high"
              assignee: "12"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
          

  /issues/{id}/revisions:
    get:
      summary: Get revision history of an issue
      description: Returns a list of all revisions for a specific issue, including the full issue snapshot and changes per revision.
      tags:
        - Issues
        - Task 4
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the issue
          schema:
            type: integer
            minimum: 1
            default: 1
      security:
        - BearerAuth: []
        - ClientIdAuth: []
      responses:
        '200':
          description: Successfully retrieved revision history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIssueRevisionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /issues/{id}/revisions/compare:
    get:
      summary: Compare issue revisions
      description: Compares two revisions of an issue and returns the changes between them along with a list of intermediate revisions.
      tags:
        - Issues
        - Task 6
      parameters:
        - name: id
          in: path
          required: true
          description: >
            Unique numeric ID of the issue.
            Use a valid issue ID, e.g., 1.
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1

        - name: from
          in: query
          required: true
          description: >
            Starting revision number for comparison.
            Must be greater than or equal to 1.
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1

        - name: to
          in: query
          required: true
          description: >
            Ending revision number for comparison.
            Must be greater than or equal to `from`.
          schema:
            type: integer
            minimum: 1
            default: 7
            example: 7

        - name: order
          in: query
          required: false
          description: >
            Sort order of the revisions. Use `asc` for oldest to newest, or `desc` for newest to oldest.
          schema:
            type: string
            enum: [asc, desc]
            default: asc
            example: asc
      security:
        - BearerAuth: []
        - ClientIdAuth: []
      responses:
        '200':
          description: Successfully compared revisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareRevisionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'


security:
  - BearerAuth: []
  - ClientIdAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ClientIdAuth:
      type: apiKey
      in: header
      name: x-client-id

  responses:
    Success:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
            
    Created:
      description: Resource created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    Accepted:
      description: Request accepted for processing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    NoContent:
      description: No content to return
      content: {}

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    Conflict:
      description: Conflict occurred (e.g., duplicate resource)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    UnprocessableEntity:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    ServiceUnavailable:
      description: Service temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    Unauthorized:
      description: Authentication error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'

    Forbidden:
      description: Forbidden - Invalid X-Client-ID
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenResponse'

    BadRequest:
      description: Bad Request - Missing or invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'

    InvalidToken:
      description: The provided token is invalid or malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TokenExpired:
      description: The authentication token has expired
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InvalidCredentials:
      description: Invalid username or password
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'            

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerErrorResponse'

    InvalidOrExpiredToken:
      description: Unauthorized - Invalid or expired token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            statusCode: 401
            message: "Token is invalid or has expired"
            error: "Unauthorized" 
              
    MissingClientIdHeader:
      description: Missing X-Client-ID header
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: "about:blank"
            title: "Missing X-Client-ID header"
            status: 400
            detail: "Missing X-Client-ID header"
            instance: "/api/v1/issues/1"
            errors:
              - field: "x-client-id"
                message: "X-Client-ID header is required"
                code: "missing_client_id"
            success: false

    InvalidClientId:
      description: Invalid X-Client-ID header
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: "about:blank"
            title: "Invalid X-Client-ID"
            status: 403
            detail: "Invalid X-Client-ID"
            instance: "/health"
            errors: null
            success: false

  schemas:
    AuthErrorTypeEnum:
      type: string
      description: Type of authentication error
      enum:
        - about:blank
        - token-expired
        - invalid-token
      example: about:blank

    ClientErrorTypeEnum:
      type: string
      description: Type of client error
      enum:
        - about:blank
        - missing-client-id
        - invalid-client-id
      example: missing-client-id

    ErrorObject:
      type: object
      properties:
        field:
          type: string
          description: Name of the field where the error occurred
        message:
          type: string
          description: Description of the error

    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          nullable: true
        errors:
          type: array
          nullable: true
          items:
            type: object
            properties:
              field:
                type: string
                example: x-client-id
              message:
                type: string
                example: X-Client-ID header is required
              code:
                type: string
                example: missing_client_id

    HealthData:
      type: object
      properties:
        status:
          type: string
          example: UP
          description: Indicates API server health

    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/HealthData'

    UnauthorizedResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/AuthErrorTypeEnum'
            title:
              type: string
              example: Authentication Error
            status:
              type: integer
              example: 401
            detail:
              type: string
              example: Authentication Error
            instance:
              type: string
              example: /api/v1/issues/1

    ForbiddenResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/ClientErrorTypeEnum'
            title:
              type: string
              example: Invalid X-Client-ID
            status:
              type: integer
              example: 403
            detail:
              type: string
              example: Invalid X-Client-ID
            instance:
              type: string
              example: /api/v1/issues/1

    BadRequestResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/ClientErrorTypeEnum'
            title:
              type: string
              example: Missing X-Client-ID header
            status:
              type: integer
              example: 400
            detail:
              type: string
              example: Missing X-Client-ID header
            instance:
              type: string
              example: /api/v1/issues/1

    InternalServerErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            type:
              type: string
              example: about:blank
            title:
              type: string
              example: Internal Server Error
            status:
              type: integer
              example: 500
            detail:
              type: string
              example: An unexpected error occurred
            instance:
              type: string
              example: /api/v1/issues/1
    
    ErrorDetail:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
        code:
          type: string

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          example: "about:blank"
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
        success:
          type: boolean
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'

    MissingClientIdError:
      type: object
      properties:
        type:
          type: string
          example: about:blank
        title:
          type: string
          example: Missing X-Client-ID header
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: Missing X-Client-ID header
        instance:
          type: string
          example: /api/v1/issues/1
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
        success:
          type: boolean
          example: false

    InvalidClientIdError:
      type: object
      properties:
        type:
          type: string
          example: about:blank
        title:
          type: string
          example: Invalid X-Client-ID
        status:
          type: integer
          example: 403
        detail:
          type: string
          example: Invalid X-Client-ID
        instance:
          type: string
          example: /api/v1/issues/1
        errors:
          type: array
          nullable: true
          items:
            type: object
        success:
          type: boolean
          example: false

    DiscoveryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                discovery:
                  type: string
                  example: http://localhost:8080

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user-1@example.com
          description: >
            Email pattern: user-<number>@example.com (e.g., user-1@example.com, user-2@example.com)
        password:
          type: string
          format: password
          example: Password123
          description: Common test password - Password123

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI...

    CreateIssueRequest:
      type: object
      required:
        - title
        - description
        - status
        - priority
      properties:
        title:
          type: string
          example: "Bug in issue-service"
        description:
          type: string
          example: "Ah snap :("
        status:
          $ref: '#/components/schemas/IssueStatusEnum'
        priority:
          $ref: '#/components/schemas/IssuePriorityEnum'
        assignee:
          type: integer
          nullable: true
          example: "12"

    UpdateIssueRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/IssueStatusEnum'
        priority:
          $ref: '#/components/schemas/IssuePriorityEnum'
        assignee:
          type: string
          nullable: true
      required:
        - title
        - description

    IssueStatusEnum:
      type: string
      description: Status of the issue
      enum:
        - open
        - in_progress
        - resolved
        - closed
      example: "open"

    IssuePriorityEnum:
      type: string
      description: Priority of the issue
      enum:
        - low
        - medium
        - high
        - critical
      example: "medium"
    


    IssueResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                id:
                  type: string
                  example: "issue_001"
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                priority:
                  type: string
                assignee:
                  type: string
                  nullable: true
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time

    GetIssuesResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            issues:
              type: array
              items:
                $ref: '#/components/schemas/Issue'
            pagination:
              type: object
              properties:
                totalItems:
                  type: integer
                totalPages:
                  type: integer
                currentPage:
                  type: integer
                pageSize:
                  type: integer
        errors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ErrorObject'

    Issue:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
        priority:
          type: string
          enum: [low, medium, high, critical]
        assignee:
          type: integer
        createdBy:
          type: integer
        updatedBy:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    GetIssueRevisionsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/IssueRevision'
        errors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ErrorObject'

    IssueRevision:
      type: object
      properties:
        revisionNumber:
          type: integer
          description: Sequential revision number
        issue:
          $ref: '#/components/schemas/IssueSnapshot'
        changes:
          type: object
          description: Fields that changed in this revision
          additionalProperties:
            type: string
        updatedBy:
          type: integer
          description: ID of the user who made the update
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of the update

    IssueSnapshot:
      type: object
      properties:
        title:
          type: string
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
        assignee:
          type: integer
          nullable: true
        priority:
          type: string
          enum: [low, medium, high, critical]
        createdBy:
          type: integer
        description:
          type: string

    CompareRevisionsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Request succeeded
        data:
          type: object
          properties:
            before:
              $ref: '#/components/schemas/IssueSnapshot'
            after:
              $ref: '#/components/schemas/IssueSnapshot'
            changes:
              type: object
              additionalProperties:
                type: string
              description: Differences between the two revisions
            revisions:
              type: array
              items:
                $ref: '#/components/schemas/IssueRevision'
        errors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ErrorObject'
    # ErrorResponse:
    #   type: object
    #   properties:
    #     success:
    #       type: boolean
    #       example: false
    #     message:
    #       type: string
    #     errors:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/ErrorObject'
